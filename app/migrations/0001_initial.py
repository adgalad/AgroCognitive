# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2018-08-03 13:41
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=30, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=30, verbose_name='Apellido')),
                ('id_number', models.IntegerField(default=0, verbose_name='ID number')),
                ('role', models.CharField(blank=True, choices=[('Cliente', 'Cliente')], max_length=9)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('date', models.DateField(verbose_name='Fecha')),
                ('coordinates', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Coordenadas')),
                ('started_at', models.TimeField(verbose_name='Comienzo')),
                ('endeded_at', models.TimeField(verbose_name='Final')),
            ],
        ),
        migrations.CreateModel(
            name='Affection',
            fields=[
                ('code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=128)),
                ('type', models.CharField(blank=True, choices=[('Rolla', 'Rolla'), ('Candelilla', 'Candelilla'), ('Estrés hídrico', 'Estrés hídrico')], max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='Biological',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biomass', models.FloatField(default=0, verbose_name='Porcentaje de sacarosa')),
                ('vegetal_coverage', models.FloatField(default=0, verbose_name='Cubierta vegetal')),
                ('wave_length', models.FloatField(default=0, verbose_name='Lengitud de onda')),
                ('chlorophyll_a', models.FloatField(default=0, verbose_name='Clorofila a')),
                ('chlorophyll_b', models.FloatField(default=0, verbose_name='Clorofila b')),
                ('beta_carotene', models.FloatField(default=0, verbose_name='ß-Caroteno')),
                ('alpha_carotene', models.FloatField(default=0, verbose_name='α-Caroteno')),
                ('xanthophyll', models.FloatField(default=0, verbose_name='Xantofila')),
                ('RVI', models.FloatField(default=0, verbose_name='Ratio Vegetation Index (RVI)')),
                ('NDVI', models.FloatField(default=0, verbose_name='Normalized Difference Vegetation Index (NDVI)')),
                ('PVI', models.FloatField(default=0, verbose_name='Perpendicular Vegetation Index (PVI)')),
                ('TVI', models.FloatField(default=0, verbose_name='Transformed Vegetation Index (TVI)')),
                ('TCAVI', models.FloatField(default=0, verbose_name='Transformed Soil Adjested Vegetation Index (TCAVI)')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('name', models.CharField(max_length=30, verbose_name='Nombre de la compañia')),
                ('rif', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='RIF')),
            ],
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=30, verbose_name='Tipo')),
                ('variety', models.CharField(max_length=30, verbose_name='Variedad')),
                ('name', models.CharField(max_length=30, verbose_name='Nombre')),
                ('density', models.FloatField(default=1, verbose_name='Densidad')),
                ('distance', models.FloatField(default=0, verbose_name='Distancia entre plantas')),
                ('coordinates', models.CharField(max_length=30, verbose_name='Coordenadas')),
                ('number_plants', models.IntegerField(default=0, verbose_name='Número de plantas')),
                ('sown_area', models.FloatField(default=0, verbose_name='Area Sembrada')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnostic',
            fields=[
                ('code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('date', models.DateField(default=datetime.date(2018, 8, 3), verbose_name='Fecha')),
                ('affections', models.ManyToManyField(related_name='diagnostics', to='app.Affection')),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnostics', to='app.Crop')),
            ],
        ),
        migrations.CreateModel(
            name='Fumigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0, verbose_name='Cantidad')),
                ('type', models.CharField(blank=True, choices=[('Pesticida 1', 'Pesticida 1'), ('Herbicida X100', 'Herbicida X100'), ('Mata Malesa', 'Mata Malesa')], max_length=16, verbose_name='Tipo')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fumigation', to='app.Activity', verbose_name='Actividad')),
            ],
        ),
        migrations.CreateModel(
            name='Ground',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carbon', models.FloatField(default=0, verbose_name='Carbón')),
                ('nitrogen', models.FloatField(default=0, verbose_name='Nitrógeno')),
                ('iron', models.FloatField(default=0, verbose_name='Hierro')),
                ('zinc', models.FloatField(default=0, verbose_name='Zinc')),
                ('calcium', models.FloatField(default=0, verbose_name='Calcio')),
                ('chlorine', models.FloatField(default=0, verbose_name='Cloro')),
                ('magnesium', models.FloatField(default=0, verbose_name='Magnesio')),
                ('ph', models.FloatField(default=7, verbose_name='pH')),
            ],
        ),
        migrations.CreateModel(
            name='Irrigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(blank=True, choices=[('Metodo 1', 'Metodo 1'), ('Metodo 2', 'Metodo 2'), ('Metodo 3', 'Metodo 3')], max_length=16, verbose_name='Metodo')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='irrigation', to='app.Activity', verbose_name='Actividad')),
            ],
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date(2018, 8, 3), verbose_name='Fecha')),
                ('type', models.CharField(blank=True, choices=[('Ground', 'Ground'), ('Nutritional', 'Nutritional'), ('Biological', 'Biological')], max_length=9, verbose_name='Tipo')),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measures', to='app.Crop', verbose_name='Cultivo')),
            ],
        ),
        migrations.CreateModel(
            name='Nutrition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0, verbose_name='Cantidad')),
                ('type', models.CharField(blank=True, choices=[('Alimento 1', 'Alimento 1'), ('Alimento 2', 'Alimento 2'), ('Alimento 3', 'Alimento 3')], max_length=16, verbose_name='Tipo')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition', to='app.Activity', verbose_name='Actividad')),
            ],
        ),
        migrations.CreateModel(
            name='Nutritional',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sulfur', models.FloatField(default=0, verbose_name='Azufre')),
                ('magnesium', models.FloatField(default=0, verbose_name='Magnesio')),
                ('cooper', models.FloatField(default=0, verbose_name='Cobre')),
                ('potasium', models.FloatField(default=0, verbose_name='Potasio')),
                ('maturation', models.FloatField(default=0, verbose_name='Maduración')),
                ('brix', models.FloatField(default=0, verbose_name='Porcentaje de jugo')),
                ('pol', models.FloatField(default=0, verbose_name='Porcentaje de sacarosa')),
                ('measure', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='nutritional', to='app.Measure', verbose_name='super')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('amount', models.FloatField(default=0, verbose_name='Monto')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Fecha')),
                ('service', models.CharField(max_length=30, verbose_name='Servicio')),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Crop', verbose_name='Cultivo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
        ),
        migrations.CreateModel(
            name='Production',
            fields=[
                ('code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Fecha inicial')),
                ('tah', models.FloatField(verbose_name='Tonelada de azucar por hectarea')),
                ('tch', models.FloatField(verbose_name='Tonelada de caña por hectarea')),
                ('pfh', models.FloatField(verbose_name='Porcetanje de Fibra por hectarea')),
                ('rend_ha', models.FloatField(verbose_name='Rendimiento por Hectarea')),
                ('brix', models.FloatField(verbose_name='Grados Brix')),
                ('pol', models.FloatField(default=0, verbose_name='Porcentaje de sacarosa')),
                ('pressing', models.FloatField(verbose_name='Molienda en toneladas')),
                ('purity', models.FloatField(verbose_name='Porcetanje de pureza')),
                ('days_zafra', models.IntegerField(verbose_name='Duración de la zafra')),
                ('ground_cane', models.FloatField(verbose_name='Toneladas de caña molida')),
                ('rend_cane', models.FloatField(verbose_name='Rendimiento de la caña')),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productions', to='app.Crop', verbose_name='Proviene de')),
            ],
        ),
        migrations.CreateModel(
            name='Prun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(blank=True, choices=[('Metodo 1', 'Metodo 1'), ('Metodo 2', 'Metodo 2'), ('Metodo 3', 'Metodo 3')], max_length=16, verbose_name='Metodo')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prun', to='app.Activity', verbose_name='Actividad')),
            ],
        ),
        migrations.CreateModel(
            name='Terrain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=30, verbose_name='Ciudad')),
                ('country', models.CharField(max_length=30, verbose_name='País')),
                ('coordinates', models.CharField(max_length=30, verbose_name='Coordenadas')),
                ('name', models.CharField(max_length=30, verbose_name='Nombre')),
                ('is_active', models.CharField(max_length=30, verbose_name='Activo')),
                ('owned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terrains', to='app.Company')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eto', models.FloatField(default=0, verbose_name='Evapotranspiración')),
                ('co2', models.FloatField(default=0, verbose_name='Dióxido de carbono')),
                ('date', models.DateField(default=datetime.date(2018, 8, 3), verbose_name='Fecha')),
                ('station', models.CharField(max_length=30, verbose_name='Estación meteorológica')),
                ('precipitation', models.FloatField(default=0, verbose_name='Precipitación')),
                ('min_temperature', models.FloatField(default=0, verbose_name='Temperatura mínima')),
                ('max_temperature', models.FloatField(default=0, verbose_name='Temperatura máxima')),
                ('radiation', models.FloatField(default=0, verbose_name='Radiación')),
                ('min_humidity', models.FloatField(default=0, verbose_name='Humedad mínima')),
                ('max_humidity', models.FloatField(default=0, verbose_name='Humedad máxima')),
                ('wind_speed', models.FloatField(default=0, verbose_name='Velocidad del viento')),
                ('terrain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_reports', to='app.Terrain')),
            ],
        ),
        migrations.AddField(
            model_name='ground',
            name='measure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ground', to='app.Measure', verbose_name='super'),
        ),
        migrations.AddField(
            model_name='crop',
            name='inside_of',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crops', to='app.Terrain'),
        ),
        migrations.AddField(
            model_name='biological',
            name='measure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='biological', to='app.Measure', verbose_name='super'),
        ),
        migrations.AddField(
            model_name='activity',
            name='crop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='app.Crop'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='app.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='activity',
            unique_together=set([('date', 'coordinates')]),
        ),
    ]
